//
// TemplateFoldersOptionsWidget.UI.cs
//
// Author:
//       Matt Ward <matt.ward@xamarin.com>
//
// Copyright (c) 2017 Xamarin Inc. (http://xamarin.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using Gtk;
using MonoDevelop.Core;
using MonoDevelop.Components;

namespace MonoDevelop.Templating
{
	partial class TemplateFoldersOptionsWidget : Gtk.Bin
	{
		FolderListSelector folderSelector;

		void Build ()
		{
			Stetic.Gui.Initialize (this);
			Stetic.BinContainer.Attach (this);

			var mainVBox = new VBox ();
			mainVBox.Spacing = 6;
			Add (mainVBox);

			var topLabel = new Label ();
			topLabel.Xalign = 0;
			topLabel.Text = GettextCatalog.GetString (
				"Custom folders where {0} will look for project templates defined with '.template.config/template.json' file.",
				BrandingService.ApplicationName);
			mainVBox.PackStart (topLabel, false, false, 0);

			folderSelector = new FolderListSelector ();
			mainVBox.PackStart (folderSelector);

			Child.ShowAll ();
		}
	}
}

// This file has been generated by the GUI designer. Do not modify.
namespace Stetic
{
	static class Gui
	{
		static bool initialized;

		internal static void Initialize (Gtk.Widget iconRenderer)
		{
			if ((Stetic.Gui.initialized == false)) {
				Stetic.Gui.initialized = true;
			}
		}
	}

	internal class BinContainer
	{
		Gtk.Widget child;

		Gtk.UIManager uimanager;

		public static BinContainer Attach (Gtk.Bin bin)
		{
			BinContainer bc = new BinContainer ();
			bin.SizeRequested += bc.OnSizeRequested;
			bin.SizeAllocated += bc.OnSizeAllocated;
			bin.Added += bc.OnAdded;
			return bc;
		}

		void OnSizeRequested (object sender, Gtk.SizeRequestedArgs args)
		{
			if ((child != null)) {
				args.Requisition = child.SizeRequest ();
			}
		}

		void OnSizeAllocated (object sender, Gtk.SizeAllocatedArgs args)
		{
			if ((child != null)) {
				child.Allocation = args.Allocation;
			}
		}

		void OnAdded (object sender, Gtk.AddedArgs args)
		{
			child = args.Widget;
		}

		public void SetUiManager (UIManager uim)
		{
			uimanager = uim;
			child.Realized += OnRealized;
		}

		void OnRealized (object sender, EventArgs args)
		{
			if ((uimanager != null)) {
				Gtk.Widget w;
				w = child.Toplevel;
				if (((w != null) && typeof(Gtk.Window).IsInstanceOfType (w))) {
					((Gtk.Window)(w)).AddAccelGroup (uimanager.AccelGroup);
					uimanager = null;
				}
			}
		}
	}
}
